name: AWS CD Pipeline
on:
  push:
    branches: [main, Deployment]

jobs:
  continuous-deployment:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Deployment'
    outputs:
      deployment-id: ${{ steps.deploy.outputs.deployment-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          export out_json=$(
            aws deploy create-deployment \
              --application-name agrizod_backend_alpha \
              --deployment-group-name agrijod_backend_deployment_alpha \
              --deployment-config-name CodeDeployDefault.OneAtATime \
              --github-location repository=${{ github.repository }},commitId=${{ github.sha }} \
              --file-exists-behavior OVERWRITE
          )
          echo "deployment-id=$(echo $out_json | jq -r '.deploymentId')" >> $GITHUB_OUTPUT 

  deployment-validation:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Deployment'
    needs: [continuous-deployment]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Wait for deployment to complete
        run: |
          aws deploy wait deployment-successful \
            --deployment-id ${{ needs.continuous-deployment.outputs.deployment-id }}

